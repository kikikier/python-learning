unittest中最核心的四个概念是：test case, test suite, test runner, test fixture。
在每一个测试用例中可以通过skip，skipIf，skipUnless装饰器跳过某个测试函数，或者用TestCase.skipTest方法跳过测试函数。

写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中。
我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行，或者我们可以直接通过TextTestRunner来执行用例。

1、TestLoader加载TestCase到TestSuite可以通过TestSuite实例对象的addTest()和addTests()方法向suite中添加case或suite
2、在Runner执行时，默认将执行结果输出到控制台，我们可以设置其输出到文件，在文件中查看结果
（通过HTMLTestRunner可以将结果输出到HTML中，生成漂亮的报告，它跟TextTestRunner是一样的）。
3、在进行测试时可以传递verbosity参数，用以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。

这里我们随意写几个业务函数，表示我们将要进行测试的功能函数。将功能函数文件存储成mathfunc.py

def add(a, b):
    return a+b

def minus(a, b):
    return a-b

def multi(a, b):
    return a*b

def divide(a, b):
    return a/b

我们通过测试用例用代码来实现每一个测试的详细过程和针对测试目标要测试的内容。同目录下创建test_mathfunc.py

import unittest
from mathfunc import *



class TestMathFunc(unittest.TestCase):

    # TestCase基类方法,所有case执行之前自动执行
    @classmethod
    def setUpClass(cls):
        print("这里是所有测试用例前的准备工作")

    # TestCase基类方法,所有case执行之后自动执行
    @classmethod
    def tearDownClass(cls):
        print("这里是所有测试用例后的清理工作")

    # TestCase基类方法,每次执行case前自动执行
    def setUp(self):
        print("这里是一个测试用例前的准备工作")

    # TestCase基类方法,每次执行case后自动执行
    def tearDown(self):
        print("这里是一个测试用例后的清理工作")

    @unittest.skip("我想临时跳过这个测试用例.")
    def test_add(self):
        self.assertEqual(3, add(1, 2))
        self.assertNotEqual(3, add(2, 2))  # 测试业务方法add

    def test_minus(self):
        self.skipTest('跳过这个测试用例')
        self.assertEqual(1, minus(3, 2))  # 测试业务方法minus

    def test_multi(self):
        self.assertEqual(6, multi(2, 3))  # 测试业务方法multi

    def test_divide(self):
        self.assertEqual(2, divide(6, 3))  # 测试业务方法divide
        self.assertEqual(2.5, divide(5, 2))

if __name__ == '__main__':
    unittest.main(verbosity=2)

注意：

 1.skip装饰器一共有三个 unittest.skip(reason)、unittest.skipIf(condition,reason)、unittest.skipUnless(condition,reason)，
 skip无条件跳过，skipIf当condition为True时跳过，skipUnless当condition为False时跳过。
 在第一行给出了每一个用例执行的结果的标识，成功是 .，失败是 F，出错是 E，跳过是 S。
 从上面也可以看出，测试的执行跟方法的顺序没有关系，test_divide写在了第4个，但是却是第2个执行的。

 2.每个测试方法均以 test 开头，否则是不被unittest识别的。

 3.其实每一个test开头的方法都会加载为独立的测试用例。

 4.在unittest.main()中加 verbosity 参数可以控制输出的错误报告的详细程度，默认是 1，如果设为 0，则不输出每一用例的执行结果。
 如果参数为2则表示输出详细结果。


问题一：以上测试执行的顺序和方法的顺序没有关系，那么我们怎么控制用例执行的顺序呢？我们就要用到TestSuite了。
我们添加到TestSuite中的case是会按照添加的顺序执行的。
问题二：我们现在只有一个测试文件，我们直接执行该文件即可，但如果有多个测试文件，怎么进行组织，总不能一个个文件执行吧，答案也在TestSuite中。
创建test_suite.py文件：

import unittest
from test_mathfunc import TestMathFunc
#from HTMLTestRunner import HTMLTestRunner

if __name__ == '__main__':
    suite = unittest.TestSuite()

    tests = [TestMathFunc("test_add"), TestMathFunc("test_minus"), TestMathFunc("test_divide")]   # 添加测试用例列表
    suite.addTests(tests)   # 将测试用例列表添加到测试组中
    suite.addTest(TestMathFunc("test_multi"))  # 直接用addTest方法添加单个TestCase
    # 前面有序，后面无序
    # 用addTests + TestLoader。不过用TestLoader的方法是无法对case进行排序的
    # loadTestsFromName()，传入'模块名.TestCase名'
    #suite.addTests(unittest.TestLoader().loadTestsFromName('test_mathfunc.TestMathFunc'))
    # loadTestsFromNames()，类似，传入列表
    #suite.addTests(unittest.TestLoader().loadTestsFromNames(['test_mathfunc.TestMathFunc']))

    # loadTestsFromTestCase()，传入TestCase
    #suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc))

    # suite中也可以套suite

    # 将测试结果输出到测试报告中
    with open('UnittestTextReport.txt', 'a') as f:
        runner = unittest.TextTestRunner(stream=f, verbosity=2)
        runner.run(suite)

    # 将测试结果输出到测试报告html中
    # with open('HTMLReport.html', 'w') as f:
    #     runner = HTMLTestRunner(stream=f,
    #                             title='MathFunc Test Report',
    #                             description='generated by HTMLTestRunner.',
    #                             verbosity=2
    #                             )
    #     runner.run(suite)

    # 直接将结果输出到控制台
    #runner = unittest.TextTestRunner(verbosity=2)
    #runner.run(suite)

执行此文件，可以看到，在同目录下生成了UnittestTextReport.txt，所有的执行报告均输出到了此文件中，这下我们便有了txt格式的测试报告了。







